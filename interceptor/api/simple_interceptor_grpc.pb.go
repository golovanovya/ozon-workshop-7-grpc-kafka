// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: simple_interceptor.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleInterceptorClient is the client API for SimpleInterceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleInterceptorClient interface {
	UserCheck(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type simpleInterceptorClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleInterceptorClient(cc grpc.ClientConnInterface) SimpleInterceptorClient {
	return &simpleInterceptorClient{cc}
}

func (c *simpleInterceptorClient) UserCheck(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/simple_interceptor.SimpleInterceptor/UserCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleInterceptorServer is the server API for SimpleInterceptor service.
// All implementations must embed UnimplementedSimpleInterceptorServer
// for forward compatibility
type SimpleInterceptorServer interface {
	UserCheck(context.Context, *UserRequest) (*UserResponse, error)
	mustEmbedUnimplementedSimpleInterceptorServer()
}

// UnimplementedSimpleInterceptorServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleInterceptorServer struct {
}

func (UnimplementedSimpleInterceptorServer) UserCheck(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheck not implemented")
}
func (UnimplementedSimpleInterceptorServer) mustEmbedUnimplementedSimpleInterceptorServer() {}

// UnsafeSimpleInterceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleInterceptorServer will
// result in compilation errors.
type UnsafeSimpleInterceptorServer interface {
	mustEmbedUnimplementedSimpleInterceptorServer()
}

func RegisterSimpleInterceptorServer(s grpc.ServiceRegistrar, srv SimpleInterceptorServer) {
	s.RegisterService(&SimpleInterceptor_ServiceDesc, srv)
}

func _SimpleInterceptor_UserCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleInterceptorServer).UserCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_interceptor.SimpleInterceptor/UserCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleInterceptorServer).UserCheck(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleInterceptor_ServiceDesc is the grpc.ServiceDesc for SimpleInterceptor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleInterceptor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple_interceptor.SimpleInterceptor",
	HandlerType: (*SimpleInterceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCheck",
			Handler:    _SimpleInterceptor_UserCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple_interceptor.proto",
}
